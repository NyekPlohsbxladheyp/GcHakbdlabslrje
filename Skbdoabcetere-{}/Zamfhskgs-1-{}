local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/Unknownproootest/Unknown-TreasureQuest/Alt/Test_FixMinimizeKey"))()

local openshit = Instance.new("ScreenGui")
local mainopen = Instance.new("TextButton")
local mainopens = Instance.new("UICorner")
local loki = Instance.new("ImageLabel")
local posto = Instance.new("UIStroke")

openshit.Name = "openshit"
openshit.Parent = game:GetService("Players").LocalPlayer:WaitForChild("PlayerGui")
openshit.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
openshit.ResetOnSpawn = false

mainopen.Name = "mainopen"
mainopen.Parent = openshit
mainopen.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
mainopen.Position = UDim2.new(0.101969875, 0, 0.110441767, 0)
mainopen.Size = UDim2.new(0, 64, 0, 42)
mainopen.Text = ""
mainopen.Visible = true
mainopens.Parent = mainopen
 
loki.Name = "loki"
loki.Parent = mainopen
loki.BackgroundColor3 = Color3.fromRGB(224,224,224)
loki.BackgroundTransparency = 1.000
loki.Position = UDim2.new(-0.0529999994, 0, -0.244000003, 0)
loki.Size = UDim2.new(0, 69, 0, 62)
loki.Image = "rbxassetid://17339439921"
 
posto.Name = "posto"
posto.Parent = mainopen
posto.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
posto.Color = Color3.fromRGB(224,224,224)
posto.LineJoinMode = Enum.LineJoinMode.Round
posto.Thickness = 1
posto.Transparency = 0
posto.Enabled = true
posto.Archivable = true
 
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
 
local function MakeDraggable(topbarobject, object)
    local Dragging = nil
    local DragInput = nil
    local DragStart = nil
    local StartPosition = nil
    
    local function Update(input)
        local Delta = input.Position - DragStart
        local pos = UDim2.new(StartPosition.X.Scale, StartPosition.X.Offset + Delta.X, StartPosition.Y.Scale, StartPosition.Y.Offset + Delta.Y)
        local Tween = TweenService:Create(object, TweenInfo.new(0.15), {
            Position = pos
        })
        Tween:Play()
    end
    
    topbarobject.InputBegan:Connect(
        function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                Dragging = true
                DragStart = input.Position
                StartPosition = object.Position
                
                input.Changed:Connect(
                    function()
                        if input.UserInputState == Enum.UserInputState.End then
                            Dragging = false
                        end
                    end
                )
            end
        end
    )
    
    topbarobject.InputChanged:Connect(
        function(input)
            if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
                DragInput = input
            end
        end
    )
    
    UserInputService.InputChanged:Connect(
        function(input)
            if input == DragInput and Dragging then
                Update(input)
            end
        end
    )
end

MakeDraggable(mainopen, mainopen) -- Making the button draggable

local RunService = game:GetService("RunService")
local fpsCounter = Instance.new("ScreenGui")
local Player = game.Players.LocalPlayer
local UserInputService = game:GetService("UserInputService")
fpsCounter.Parent = game.CoreGui
fpsCounter.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
fpsCounter.ResetOnSpawn = false

local label = Instance.new("TextLabel")
label.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
label.BackgroundTransparency = 1.000
label.TextColor3 = Color3.fromRGB(255, 255, 255)
label.Font = Enum.Font.GothamBlack
label.Size = UDim2.new(0, 150, 0, 70)
label.Position = UDim2.new(0, 200, 0, 10)
label.Text = "FPS: 0\nTime Played: 0h 0m 0s"
label.TextSize = 10
label.Parent = fpsCounter

local startTime = tick()
local lastUpdateTime = tick()
local frameCount = 0

RunService.RenderStepped:Connect(function()
    local currentTime = tick()
    local deltaTime = currentTime - lastUpdateTime
    frameCount = frameCount + 1
    
    if frameCount == 1 and untilloaded == true then
       game:GetService("Players").LocalPlayer:Kick("Device Saver: CRASH DETECTED")
    end

    if deltaTime >= 1 then
        local fps = math.round(frameCount / deltaTime)
        local elapsedTime = currentTime - startTime

        local hours = math.floor(elapsedTime / 3600)
        local minutes = math.floor((elapsedTime % 3600) / 60)
        local seconds = math.floor(elapsedTime % 60)

        label.Text = "FPS: " .. fps .. "\nClient Timer: " .. hours .. "h " .. minutes .. "m " .. seconds .. "s"

        lastUpdateTime = currentTime
        frameCount = 0
    end
end)

mainopen.MouseButton1Click:Connect(function()
    game:GetService("VirtualInputManager"):SendKeyEvent(true, "LeftControl", false, game)
    game:GetService("VirtualInputManager"):SendKeyEvent(false, "LeftControl", false, game)
end)

if not require then
    return game:GetService("Players").LocalPlayer:Kick("UNC RESTRICTION MISSING: require(path) | PLEASE TRY OTHER EXECUTORS")
else
print("Supported require()")
end

if not firetouchinterest  then
    return game:GetService("Players").LocalPlayer:Kick("UNC RESTRICTION MISSING: firetouchinterest() | PLEASE TRY OTHER EXECUTORS")
else
print("Supported firetouchinterest()")
end

if not setfpscap or setfpscap(500) then
    return game:GetService("Players").LocalPlayer:Kick("UNC RESTRICTION MISSING: setfpscap() | PLEASE TRY OTHER EXECUTORS")
else
print("Supported setfpscap()")
end

if not setfflag then
    return game:GetService("Players").LocalPlayer:Kick("UNC RESTRICTION MISSING: setfflag() | PLEASE TRY OTHER EXECUTORS")
else
print("Supported setfflag()")
end

if not hookmetamethod then
    return game:GetService("Players").LocalPlayer:Kick("UNC RESTRICTION MISSING: hookmetamethod() | PLEASE TRY OTHER EXECUTORS")
else
print("Supported hookmetamethod()")
end

if game.Players then
print("Advance Api")
else
print("Common Api")
end

local workspace = game:GetService("Workspace")
local Player = game.Players.LocalPlayer
local vu = game:GetService("VirtualUser")
local TeleportService = game:GetService('TeleportService')
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")
local camera = workspace.CurrentCamera
local normalgrav = workspace.Gravity
local TweenService = game:GetService("TweenService")

local Window = Fluent:CreateWindow({
    Title = "Unknown Hub X ZA",
    SubTitle = "V2.5 Made by Unknownproooolucky discord.gg/d2a3KkTD6r",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = false, -- The blur may be detectable, setting this to false disables blur entirely
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl -- Used when theres no MinimizeKeybind
})

local Options = Fluent.Options

local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "rbxassetid://7733960981" }),
    AutoFarm = Window:AddTab({ Title = "Auto Farms", Icon = "rbxassetid://7743866529" }),
    Zombie = Window:AddTab({ Title = "Zombie Mods", Icon = "rbxassetid://7734053426" }),
    Misc = Window:AddTab({ Title = "Misc", Icon = "rbxassetid://7734022107" }),
    Settings = Window:AddTab({ Title = "Save Config", Icon = "rbxassetid://7734052335" })
}

-- Main

Tabs.Main:AddParagraph({
        Title = "Leaderboard Notifier",
        Content = " "
    })
    
local control = {
	Money = false,
	Kill = false,
	Level = false
}

    local Toggle = Tabs.Main:AddToggle("KillNotify", {Title = "Kill Notification", Default = false })

    Toggle:OnChanged(function(State)
        control.Kill = State
    end)
    
    Options.KillNotify:SetValue(false)
    
    local Toggle = Tabs.Main:AddToggle("LevelNotify", {Title = "Level Notification", Default = false })

    Toggle:OnChanged(function(State)
        control.Level = State
    end)
    
    Options.LevelNotify:SetValue(false)
    
    local Toggle = Tabs.Main:AddToggle("MoneyNotify", {Title = "Money Notification", Default = false })

    Toggle:OnChanged(function(State)
        control.Money = State
    end)
    
    Options.MoneyNotify:SetValue(false)
 
 Player.leaderstats.Cash:GetPropertyChangedSignal("Value"):Connect(function()
if control.Money == true then
game.StarterGui:SetCore("SendNotification", {
    Title = "$ Money Notification $",
    Text = "Money Counted: [ " .. tostring(Player.leaderstats.Cash.Value) .. " ]",
    Duration = 5
})
end
end)

Player.leaderstats.Kills:GetPropertyChangedSignal("Value"):Connect(function()
    if control.Kill == true then
        game.StarterGui:SetCore("SendNotification", {
            Title = "☠️ Killed Notification ☠️",
            Text = "Weapon Type: " .. tostring(getEquippedWeapon(Player)) .. "\nKilled Counted: [  " .. tostring(Player.leaderstats.Kills.Value) .. " ]",
            Duration = 5
        })
    end
end)


Player.leaderstats.Level:GetPropertyChangedSignal("Value"):Connect(function()
if control.Level == true then
game.StarterGui:SetCore("SendNotification", {
    Title = "↑ Level Notification ↑",
    Text = "Level Counted: [ " .. tostring(Player.leaderstats.Level.Value) .. " ]",
    Duration = 5
})

end
end)

Tabs.Main:AddParagraph({
        Title = "Character",
        Content = " "
    })

local Toggle = Tabs.Main:AddToggle("AntiAfk", {Title = "Anti-AFK", Default = false })

    Toggle:OnChanged(function()
local vu = game:GetService("VirtualUser")
repeat wait() until game:IsLoaded() 
	game:GetService("Players").LocalPlayer.Idled:connect(function()
    game:GetService("VirtualUser"):ClickButton2(Vector2.new())
		vu:Button2Down(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
		wait(1)
		vu:Button2Up(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
     end)
 end)

Options.AntiAfk:SetValue(true)

local HumanModCons = {}
local speaker = game.Players.LocalPlayer

-- Define the slider for walkspeed
local SliderWalkSpeed = Tabs.Main:AddSlider("Walkspeed", {
    Title = "Walkspeed Slider",
    Description = "",
    Default = 16,
    Min = 16,
    Max = 200,
    Rounding = 1,
    Callback = function(speed)
        -- Function to update walkspeed
        local function WalkSpeedChange()
            local Char = speaker.Character or workspace:FindFirstChild(speaker.Name)
            local Human = Char and Char:FindFirstChildWhichIsA("Humanoid")
            if Char and Human then
                Human.WalkSpeed = speed
            end
        end
        
        WalkSpeedChange()
        
        -- Monitor changes to WalkSpeed property
        if HumanModCons.wsConn then
            HumanModCons.wsConn:Disconnect()
        end
        local Char = speaker.Character or speaker.CharacterAdded:Wait()
        local Human = Char:WaitForChild("Humanoid")
        HumanModCons.wsConn = Human.Changed:Connect(function(property)
            if property == "WalkSpeed" then
                WalkSpeedChange()
            end
        end)
    end
})

-- Define the slider for jump power
local SliderJumpPower = Tabs.Main:AddSlider("JumpPower", {
    Title = "Jump Power Slider",
    Description = "",
    Default = 50,
    Min = 50,
    Max = 200,
    Rounding = 1,
    Callback = function(jpower)
        -- Function to update jump power
        local function JumpPowerChange()
            local Char = speaker.Character or workspace:FindFirstChild(speaker.Name)
            local Human = Char and Char:FindFirstChildWhichIsA("Humanoid")
            if Char and Human then
                if Human.UseJumpPower then
                    Human.JumpPower = jpower
                else
                    Human.JumpHeight = jpower
                end
            end
        end
        
        JumpPowerChange()
        
        -- Monitor changes to JumpPower or JumpHeight property
        if HumanModCons.jpConn then
            HumanModCons.jpConn:Disconnect()
        end
        local Char = speaker.Character or speaker.CharacterAdded:Wait()
        local Human = Char:WaitForChild("Humanoid")
        HumanModCons.jpConn = Human.Changed:Connect(function(property)
            if property == "JumpPower" or property == "JumpHeight" then
                JumpPowerChange()
            end
        end)
    end
})

local FLYING = false
local velocityHandlerName = "VelocityHandler"
local gyroHandlerName = "GyroHandler"
local mfly1, mfly2
local currentCharacter

local function getRoot(character)
    return character:FindFirstChild("HumanoidRootPart") or character:FindFirstChild("Torso")
end

local function unmobilefly(player)
    pcall(function()
        FLYING = false
        local character = player.Character
        if character then
            local root = getRoot(character)
            if root then
                local velocityHandler = root:FindFirstChild(velocityHandlerName)
                local gyroHandler = root:FindFirstChild(gyroHandlerName)

                if velocityHandler then
                    velocityHandler:Destroy()
                end

                if gyroHandler then
                    gyroHandler:Destroy()
                end

                local humanoid = character:FindFirstChildWhichIsA("Humanoid")
                if humanoid then
                    humanoid.PlatformStand = false
                end
            end
        end

        if mfly1 then
            mfly1:Disconnect()
        end

        if mfly2 then
            mfly2:Disconnect()
        end
    end)
end

local function mobilefly(player, vfly)
    unmobilefly(player)
    FLYING = true

    local character = player.Character
    local root = getRoot(character)

    if character and root then
        local camera = workspace.CurrentCamera
        local v3none = Vector3.new()
        local v3zero = Vector3.new(0, 0, 0)
        local v3inf = Vector3.new(9e9, 9e9, 9e9)

        local controlModule = require(player.PlayerScripts:WaitForChild("PlayerModule"):WaitForChild("ControlModule"))
        local bv = Instance.new("BodyVelocity")
        bv.Name = velocityHandlerName
        bv.Parent = root
        bv.MaxForce = v3zero
        bv.Velocity = v3zero

        local bg = Instance.new("BodyGyro")
        bg.Name = gyroHandlerName
        bg.Parent = root
        bg.MaxTorque = v3inf
        bg.P = 1000
        bg.D = 20

        mfly1 = player.CharacterAdded:Connect(function()
            unmobilefly(player)
            currentCharacter = player.Character
            mobilefly(player, vfly)
        end)

        mfly2 = RunService.RenderStepped:Connect(function()
            root = getRoot(player.Character)
            camera = workspace.CurrentCamera
            if player.Character:FindFirstChildWhichIsA("Humanoid") and root and root:FindFirstChild(velocityHandlerName) and root:FindFirstChild(gyroHandlerName) then
                local humanoid = player.Character:FindFirstChildWhichIsA("Humanoid")
                local VelocityHandler = root:FindFirstChild(velocityHandlerName)
                local GyroHandler = root:FindFirstChild(gyroHandlerName)

                if VelocityHandler and GyroHandler then
                    VelocityHandler.MaxForce = v3inf
                    GyroHandler.MaxTorque = v3inf

                    if not vfly and humanoid then
                        humanoid.PlatformStand = false
                    end

                    GyroHandler.CFrame = camera.CoordinateFrame
                    VelocityHandler.Velocity = v3none

                    local direction = controlModule:GetMoveVector()
                    if direction.X ~= 0 or direction.Z ~= 0 then
                        local moveVector = Vector3.new(direction.X, 0, direction.Z).unit
                        local rightVector = camera.CFrame.RightVector
                        local forwardVector = camera.CFrame.LookVector

                        local flyDirection = (rightVector * moveVector.X - forwardVector * moveVector.Z).unit

                        VelocityHandler.Velocity = flyDirection * (_G.flySpeed * 20)
                        RunService.RenderStepped:Wait()
                    end
                end
            end
        end)
    end
end

local function toggleFly(player, toggleValue)
    if toggleValue then
        mobilefly(player, true)
    else
        unmobilefly(player)
    end
end

-- Your loop structure
_G.loops = false

local function flyLoop()
    while wait(0.15) do
        if _G.loops then
            local player = game:GetService("Players").LocalPlayer
            if player and player.Character then
                mobilefly(player, true)
            end
        end
    end
end

local Toggle = Tabs.Main:AddToggle("FlyToggle", { Title = "Fly Toggle", Default = false })

Toggle:OnChanged(function()
    local player = game:GetService("Players").LocalPlayer
    _G.loops = Toggle.Value
    toggleFly(player, Toggle.Value)
end)

Options.FlyToggle:SetValue(false)

_G.flySpeed = 20  -- Default fly speed

local FlySpeedInput = Tabs.Main:AddInput("FlySpeedInput", {
    Title = "Fly Speed",
    Default = tostring(_G.flySpeed),
    Placeholder = "Enter fly speed",
    Numeric = true,
    Finished = false,
    Callback = function(Value)
        _G.flySpeed = tonumber(Value) or 20
        toggleFly(player, Toggle.Value)
    end
})

-- Start the loop
spawn(flyLoop)

local Toggle = Tabs.Main:AddToggle("Noclip", {Title = "Noclip", Default = false })

local NoClipx = false

local function Noclip()
            pcall(function()
                for i, v in pairs(game:GetService("Players").LocalPlayer.Character:GetDescendants()) do
                    if v:IsA("BasePart") then
                        v.CanCollide = false
                 end
            end
      end)
end

    Toggle:OnChanged(function(State)
NoClipx = State
repeat
if NoClipx then
   Noclip()
       wait(0.1)
        end
       until not NoClipx == true
    end)

Options.Noclip:SetValue(false)

-- AutoFarm
local function getNearestBosses()
local nearest, dist = nil, math.huge -- Set a very large initial distance
    for _, v in pairs(game.Workspace.BossFolder:GetDescendants()) do
        if v:FindFirstChild("Head") then
            local m = (Player.Character.Head.Position - v.Head.Position).magnitude
            if m < dist then
                dist = m
                nearest = v
            end
        end
    end
    return nearest
end

local function getNearest()
    local nearest, dist = nil, math.huge -- Set a very large initial distance
    for _, v in pairs(game.Workspace.BossFolder:GetDescendants()) do
        if v:FindFirstChild("Head") then
            local m = (Player.Character.Head.Position - v.Head.Position).magnitude
            if m < dist then
                dist = m
                nearest = v
            end
        end
    end
    for _, v in pairs(game.Workspace.enemies:GetDescendants()) do
        if v:FindFirstChild("Head") then
            local m = (Player.Character.Head.Position - v.Head.Position).magnitude
            if m < dist then
                dist = m
                nearest = v
            end
        end
    end
    return nearest
end

local Player = game.Players.LocalPlayer

function GetGunsName()
    local gunNames = {}
    for _, Thing in pairs(game:GetService("ReplicatedStorage").Guns:GetChildren()) do
        if Thing:IsA("Tool") then
            table.insert(gunNames, Thing.Name)
        end
    end
    return gunNames
end

function GetKnivesName()
    local knifeNames = {}
    for _, Thing in pairs(game:GetService("ReplicatedStorage").Knives:GetChildren()) do
        if Thing:IsA("Tool") then
            table.insert(knifeNames, Thing.Name)
        end
    end
    return knifeNames
end

function EquipGun()
    local gunNames = GetGunsName() 
    for _, Thing in pairs(Player.Backpack:GetChildren()) do
        if Thing:IsA("Tool") and table.find(gunNames, Thing.Name) then
            Thing.Parent = Player.Character
        end
    end
end

function EquipKnives()
    local knifeNames = GetKnivesName()
    for _, Thing in pairs(Player.Backpack:GetChildren()) do
        if Thing:IsA("Tool") and table.find(knifeNames, Thing.Name) then
            Thing.Parent = Player.Character
        end
    end
end

function tweenfunction(coordination)
	TweenService:Create(game.Players.LocalPlayer.Character.HumanoidRootPart, TweenInfo.new(1, Enum.EasingStyle.Linear, Enum.EasingDirection.Out,0,false,0), {CFrame = coordination}):Play()
end

Tabs.AutoFarm:AddParagraph({
        Title = "Auto Farm",
        Content = " "
    })

local FarmToggle = false
local PositonX = 0
local groundDistance = 12
local PositionZ = 9
local FarmType = "CFrame"

local Toggle = Tabs.AutoFarm:AddToggle("FarmZombies", {Title = "Auto Farm (Zombies/Boss)", Default = false })

    Toggle:OnChanged(function(State)
     FarmToggle = State
if FarmToggle == true then
	workspace.Gravity = 0
else
	workspace.Gravity = normalgrav
end

repeat
if FarmToggle == true and wait() then
spawn(function()
if _G._userGun == true then
-- game:GetService("Workspace").CurrentCamera.CFrame = CFrame.new(game:GetService("Workspace").CurrentCamera.CFrame.p, getNearest().Head.Position)
if FarmType == "CFrame" and getNearest() then
Player.Character.HumanoidRootPart.CFrame = (getNearest().HumanoidRootPart.CFrame * CFrame.new(PositonX, groundDistance, PositonZ))
elseif FarmType == "Tween" and getNearest() then
tweenfunction((getNearest().HumanoidRootPart.CFrame * CFrame.new(PositonX, groundDistance, PositonZ)))
end
game:GetService("ReplicatedStorage")["forhackers"]:InvokeServer("hit",getEquippedWeapon(Player),getNearest()[_G._ZombieKillPart])
else
-- game:GetService("Workspace").CurrentCamera.CFrame = CFrame.new(game:GetService("Workspace").CurrentCamera.CFrame.p, getNearest().Head.Position)
if FarmType == "CFrame" and getNearest() then
Player.Character.HumanoidRootPart.CFrame = (getNearest().HumanoidRootPart.CFrame * CFrame.new(PositonX, groundDistance, PositonZ))
elseif FarmType == "Tween" and getNearest() then
tweenfunction((getNearest().HumanoidRootPart.CFrame * CFrame.new(PositonX, groundDistance, PositonZ)))
end
game.ReplicatedStorage.Gun:FireServer({["Normal"] = Vector3.new(0, 0, 0), ["Direction"] = getNearest()[_G._ZombieKillPart].Position, ["Name"] = getEquippedWeapon(Player), ["Hit"] = getNearest()[_G._ZombieKillPart], ["Origin"] = getNearest()[_G._ZombieKillPart].Position, ["Pos"] = getNearest()[_G._ZombieKillPart].Position,})
             end
         end)
    end
    until FarmToggle == false
end)
        

    
Tabs.AutoFarm:AddParagraph({
        Title = "Farming Settings",
        Content = ""
    })

 local Dropdown = Tabs.AutoFarm:AddDropdown("FarmingType", {
        Title = "Farming Type",
        Values = {"CFrame", "Tween"},
        Multi = false,
        Default = 1,
    })

    Dropdown:OnChanged(function(Value)
        FarmType = Value
    end)
    
 local Slider = Tabs.AutoFarm:AddSlider("PosX", {
        Title = "Farm Position X",
        Description = "",
        Default = 0,
        Min = 0,
        Max = 30,
        Rounding = 1,
        Callback = function(Value)
            PositonX = tonumber(Value) or 0
        end
    })
    
 local Slider = Tabs.AutoFarm:AddSlider("PosY", {
        Title = "Farm Position Y",
        Description = "",
        Default = 12,
        Min = 0,
        Max = 30,
        Rounding = 1,
        Callback = function(Value)
            groundDistance = tonumber(Value) or 12
        end
    })
    
local Slider = Tabs.AutoFarm:AddSlider("PosZ", {
        Title = "Farm Position Z",
        Description = "",
        Default = 9,
        Min = 0,
        Max = 30,
        Rounding = 1,
        Callback = function(Value)
            PositonZ = tonumber(Value) or 9
        end
    })
    
Tabs.AutoFarm:AddParagraph({
        Title = "Auto Equip",
        Content = " "
    })
    
local EquipKnivesTG = false
local EquipGunsTG = false

local Toggle = Tabs.AutoFarm:AddToggle("Equip1", {Title = "Equip Gun", Default = false })

    Toggle:OnChanged(function(State)
     EquipGunsTG = State
     
     if EquipGunsTG and EquipKnivesTG == true then
       Fluent:Notify({
           Title = "Disabled Equip Knives",
            Content = "",
            SubContent = "", -- Optional
            Duration = 5 -- Set to nil to make the notification not disappear
        })
        Options.Equip2:SetValue(false)
     end
     
     
while wait(1) and EquipGunsTG do
          EquipGun()
        end
    end)
    
local Toggle = Tabs.AutoFarm:AddToggle("Equip2", {Title = "Equip Knives", Default = false })

    Toggle:OnChanged(function(State)
     EquipKnivesTG = State
     
     if EquipKnivesTG and EquipGunsTG == true then
       Fluent:Notify({
           Title = "Disabled Equip Gun",
            Content = "",
            SubContent = "", -- Optional
            Duration = 5 -- Set to nil to make the notification not disappear
        })
        Options.Equip1:SetValue(false)
     end

while wait(1) and EquipKnivesTG do
         EquipKnives()
      end
    end)
 
 Tabs.AutoFarm:AddParagraph({
        Title = "Auto Crates",
        Content = " "
    })
    
local SelectedCrate = "Basic #1"

local Dropdown = Tabs.AutoFarm:AddDropdown("SelectedCrate", {
        Title = "Select Crate",
        Values = {"Basic #1","Basic #2","Basic #3","Uncommon","Rare","Legendary"},
        Multi = false,
        Default = 1,
    })


    Dropdown:OnChanged(function(list)
        SelectedCrate = list
    end)
    
local Toggle = Tabs.AutoFarm:AddToggle("AutoBuyCrate", {Title = "Auto Buy Crates", Default = false })

    Toggle:OnChanged(function(bool)
    OpenCrates = bool
	while wait(0.1) and OpenCrates do
		if OpenCrates == false then break end
         game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("unbox_box",SelectedCrate)
        end
    end)
 
Tabs.AutoFarm:AddParagraph({
        Title = "Auto Collect/Claim",
        Content = " "
    })

local AutoClaimMission = false

local Toggle = Tabs.AutoFarm:AddToggle("ClaimMission", {Title = "Auto Claim Mission", Default = false })

    Toggle:OnChanged(function(State)
       AutoClaimMission = State
	while wait() and AutoClaimMission do
		if AutoClaimMission == false then break end
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("claimReward",1)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("claimReward",2)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("claimReward",3)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("claimReward",4)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("claimReward",5)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("claimReward",6)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("claimReward",7)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("claimReward",8)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("claimReward",9)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("claimReward",10)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("claimReward",11)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("claimReward",12)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("claimReward",13)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("claimReward",14)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("claimReward",15)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("claimReward",16)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("claimReward",17)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("claimReward",18)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("claimReward",19)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("claimReward",20)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("claimReward",21)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("claimReward",22)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("claimReward",23)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("claimReward",24)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("claimReward",25)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("claimReward",26)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("claimReward",27)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("claimReward",28)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("claimReward",29)
	end
 end)
    
local AutoDiscardMission = false
   
local Toggle = Tabs.AutoFarm:AddToggle("ClearMission", {Title = "Auto Discard Mission", Default = false })

    Toggle:OnChanged(function(State)
        AutoDiscardMission = State
	while wait() and AutoDiscardMission do
		if AutoDiscardMission == false then break end
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("discardTask",1)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("discardTask",2)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("discardTask",3)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("discardTask",4)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("discardTask",5)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("discardTask",6)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("discardTask",7)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("discardTask",8)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("discardTask",9)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("discardTask",10)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("discardTask",11)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("discardTask",12)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("discardTask",13)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("discardTask",14)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("discardTask",15)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("discardTask",16)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("discardTask",17)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("discardTask",18)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("discardTask",19)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("discardTask",20)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("discardTask",21)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("discardTask",22)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("discardTask",23)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("discardTask",24)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("discardTask",25)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("discardTask",26)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("discardTask",27)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("discardTask",28)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("discardTask",29)
	end
 end)

local AutoCollectSystemIndic2 = false

local Toggle = Tabs.AutoFarm:AddToggle("CollectPowers", {Title = "Auto Collect Power Ups", Default = false })

    Toggle:OnChanged(function(State)
        AutoCollectSystemIndic2 = State
        
 workspace.Powerups.ChildAdded:Connect(function(variable)
   repeat
      if AutoCollectSystemIndic2 == true and wait(0.1) then
      for i,v in pairs(variable:GetDescendants()) do
       	if v:IsA("Part") or v:IsA("BasePart") then
          	v.CFrame = CFrame.new(Player.Character.Torso.Position + Vector3.new(0, 0, 0.8))
          	v.Position = Player.Character.Torso.Position + Vector3.new(0, 0, 0.8)
          	v.CanCollide = false
	        end
      	end
	   end
	
	    until AutoCollectSystemIndic2 == false	
   end)
end)
    
-- Zombie

Tabs.Zombie:AddParagraph({
        Title = "Zombie ESP",
        Content = " "
    })

local ESP = false

local Toggle = Tabs.Zombie:AddToggle("EspZombie", {Title = "Esp Zombie", Default = false })

    Toggle:OnChanged(function(bool)
ESP = bool

spawn(function()
    while wait(0.4) do
        pcall(function()
            if ESP then
                for i, v in pairs(game:GetService("Workspace").enemies:GetChildren()) do
                    if v:FindFirstChild('HumanoidRootPart') then
                        local evilHumanoid = v:FindFirstChild("Humanoid")  -- Change "Humanoid" to "EvilHumanoid"
                        
                        if not v:FindFirstChild("MobEap") then
                            local BillboardGui = Instance.new("BillboardGui")
                            local TextLabel = Instance.new("TextLabel")

                            BillboardGui.Parent = v
                            BillboardGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
                            BillboardGui.Active = true
                            BillboardGui.Name = "MobEap"
                            BillboardGui.AlwaysOnTop = true
                            BillboardGui.LightInfluence = 1.000
                            BillboardGui.Size = UDim2.new(0, 200, 0, 50)
                            BillboardGui.StudsOffset = Vector3.new(0, 2.5, 0)

                            TextLabel.Parent = BillboardGui
                            TextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                            TextLabel.BackgroundTransparency = 1.000
                            TextLabel.Size = UDim2.new(0, 200, 0, 50)
                            TextLabel.TextScaled = false
                            TextLabel.TextColor3 = Color3.fromRGB(0, 255, 0)
                            TextLabel.Font = Enum.Font.GothamBold
                            TextLabel.TextSize = 14  -- Adjust the text size to your preference

                            v.MobEap = BillboardGui  -- Store the BillboardGui in MobEap for later use
                        end

                        local distance = math.floor((game.Players.LocalPlayer.Character.HumanoidRootPart.Position - v.HumanoidRootPart.Position).Magnitude)

                        if evilHumanoid then
                            local health = math.floor(evilHumanoid.Health)
                            v.MobEap.TextLabel.Text = v.Name.." - "..distance.." M\nHealth: "..health
                        else
                            v.MobEap.TextLabel.Text = v.Name.." - "..distance.." M"
                        end
                    end
                end
            else
                for i, v in pairs(game:GetService("Workspace").enemies:GetChildren()) do
                    if v:FindFirstChild("MobEap") then
                        v.MobEap:Destroy()
                    end
                end
            end
        end)
    end
end)
    end)

    Options.EspZombie:SetValue(false)
    
    
 local ESP2 = false
 
local Toggle = Tabs.Zombie:AddToggle("EspBoss", {Title = "Esp Boss", Default = false })

    Toggle:OnChanged(function(bool)
        ESP2 = bool

spawn(function()
    while wait(0.4) do
        pcall(function()
            if ESP2 then
                for i, v in pairs(game:GetService("Workspace").BossFolder:GetChildren()) do
                    if v:FindFirstChild('HumanoidRootPart') then
                        local evilHumanoid = v:FindFirstChild("Humanoid")  -- Change "Humanoid" to "EvilHumanoid"
                        
                        if not v:FindFirstChild("MobEap") then
                            local BillboardGui = Instance.new("BillboardGui")
                            local TextLabel = Instance.new("TextLabel")

                            BillboardGui.Parent = v
                            BillboardGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
                            BillboardGui.Active = true
                            BillboardGui.Name = "MobEap"
                            BillboardGui.AlwaysOnTop = true
                            BillboardGui.LightInfluence = 1.000
                            BillboardGui.Size = UDim2.new(0, 200, 0, 50)
                            BillboardGui.StudsOffset = Vector3.new(0, 2.5, 0)

                            TextLabel.Parent = BillboardGui
                            TextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                            TextLabel.BackgroundTransparency = 1.000
                            TextLabel.Size = UDim2.new(0, 200, 0, 50)
                            TextLabel.TextScaled = false
                            TextLabel.TextColor3 = Color3.fromRGB(255, 0, 0)
                            TextLabel.Font = Enum.Font.GothamBold
                            TextLabel.TextSize = 14  -- Adjust the text size to your preference

                            v.MobEap = BillboardGui  -- Store the BillboardGui in MobEap for later use
                        end

                        local distance = math.floor((game.Players.LocalPlayer.Character.HumanoidRootPart.Position - v.HumanoidRootPart.Position).Magnitude)

                        if evilHumanoid then
                            local health = math.floor(evilHumanoid.Health)
                            v.MobEap.TextLabel.Text = v.Name.." - "..distance.." M\nHealth: "..health
                        else
                            v.MobEap.TextLabel.Text = v.Name.." - "..distance.." M"
                        end
                    end
                end
            else
                for i, v in pairs(game:GetService("Workspace").BossFolder:GetChildren()) do
                    if v:FindFirstChild("MobEap") then
                        v.MobEap:Destroy()
                    end
                end
            end
        end)
    end
end)
    end)

    Options.EspBoss:SetValue(false)

Tabs.Zombie:AddParagraph({
        Title = "Zombie Mods",
        Content = " "
    })

local targetFolders = {
    workspace.enemies,
    workspace.BossFolder
}
local mainsize = 7
local BigHead = false

local Toggle = Tabs.Zombie:AddToggle("BigHead", {Title = "Big Zombie Head", Default = false })

    Toggle:OnChanged(function(value)
    BigHead = value
while BigHead and wait(0.2) do

for _, targetFolder in ipairs(targetFolders) do
    for _, value in pairs(targetFolder:GetDescendants()) do
        if value:FindFirstChild("Head") or value:FindFirstChild("Torso") then
            if value.Name ~= game:GetService("Players").LocalPlayer.Name then
            pcall(function()
                value.Head.Transparency = 0.7
                value.Head.CanCollide = false
                value.Head.Massless = true
                value.Head.Size = Vector3.new(mainsize, mainsize, mainsize)
                value.Head.CFrame = value.Torso.CFrame * CFrame.new(0, mainsize/2, 0)
                end)
              end
           end
         end
      end
   end
end)

    Options.BigHead:SetValue(false)
    
local Slider = Tabs.Zombie:AddSlider("HeadSize", {
        Title = "Head Size",
        Description = " ",
        Default = 7,
        Min = 1,
        Max = 30,
        Rounding = 1,
        Callback = function(Value)
            mainsize = tonumber(Value) or 1
        end
    })

-- Misc

local globalTarget = nil
local camera = workspace.CurrentCamera

_G._ZombieKillPart = "Head"
local PrimaryPart = "Head"
_G._ZombieKillPart2 = "HumanoidRootPart"

function KillZombies(weapontype,partaim)
if weapontype == "gun" then
game:GetService("ReplicatedStorage").Gun:FireServer({["Normal"] = Vector3.new(0,0,0),["Direction"] = getNearest()[partaim].Position,["Name"] = getEquippedWeapon(game.Players.LocalPlayer),["Hit"] = getNearest()[partaim],["Origin"] = getNearest()[partaim].Position,["Pos"] = getNearest()[partaim].Position})
elseif weapontype == "melee" then
game:GetService("ReplicatedStorage")["forhackers"]:InvokeServer("hit",getEquippedWeapon(game.Players.LocalPlayer),getNearest()[partaim])
else
	return "INVALID WEAPON TYPE"
end
end

function RayFromCamera()
local ray = Ray.new(workspace.CurrentCamera.CFrame.p, workspace.CurrentCamera.CFrame.lookVector * 100)

local ignoreList = {Player.Character} -- Daftar objek yang akan diabaikan saat raycasting

local hit, position = workspace:FindPartOnRayWithIgnoreList(ray, ignoreList)

if hit then
    return "Object name: " .. tostring(hit.Name) .. "\nSurface normal at hit point: nil\nObject found at position: \n" .. tostring(position)
end
end

function RayFromHead()
local ray = Ray.new(Player.Character.Head.Position, Player.Character.Head.CFrame.lookVector * 100)
local ignoreList = {Player.Character} -- Kita tidak ingin ray mengenai karakter pemain itu sendiri

local hit, position = workspace:FindPartOnRayWithIgnoreList(ray, ignoreList)

if hit then
    return "Object name: " .. tostring(hit.Name) .. "\nSurface normal at hit point: nil\nObject found at position: \n" .. tostring(position)
    --highlightPart(hit)
end
end

local function wallbang(pos,vic,func)
    local workspace = game:GetService("Workspace")
    local ray = Ray.new(pos,(pos - vic.Position).unit * 500)
    local hitPart,hitPosition = workspace:FindPartOnRayWithIgnoreList(ray,workspace["map"],true,true)
    if hitPart then
        func(hitPosition)
    end
end

local function isBehindWall(player)
    local ray = Ray.new(camera.CFrame.Position, player.Head.Position - camera.CFrame.Position)
    local hit = game.GetService(game, "Workspace").FindPartOnRayWithWhitelist(game.GetService(game, "Workspace"), ray, {game.GetService(game, "Workspace").enemies})
    if hit and hit.Parent == player then
        return false
    end
    return true
end

function getEquippedWeapon(player)
        local char = player.Character
        local weapon = char and char:FindFirstChildWhichIsA("Tool")
    
        if weapon ~= nil then
            return weapon.Name
        else
            return "None"
        end
    end
    
 function GetToolName()
for _,Thing in pairs(game:GetService("ReplicatedStorage").Guns:GetChildren()) do
   if Thing:IsA("Tool") then
      return Thing.Name
   end
 end
end

local KnifeName = "Basic Knife"
local ConfirmSystem = {
	Damage = false,
	Tracking = false,
	Throwing = false,
	Wallbang = false
}

local gmt = getrawmetatable(game)
setreadonly(gmt, false)
local oldNamecall = gmt.__namecall
gmt.__namecall = newcclosure(function(self, ...)
                local Args = {...}
                local method = getnamecallmethod()
                if tostring(self) == "Gun" and tostring(method) == "FireServer" and ConfirmSystem.Damage == true then
		      Args[1]["Normal"] = Vector3.new(0,0,0)
                      Args[1]["Direction"] = getNearest()[_G._ZombieKillPart].Position
                      Args[1]["Name"] = getEquippedWeapon(game.Players.LocalPlayer)
                      Args[1]["Hit"] = getNearest()[_G._ZombieKillPart]
                      Args[1]["Origin"] = getNearest()[_G._ZombieKillPart].Position
                      Args[1]["Pos"] = getNearest()[_G._ZombieKillPart].Position
		    return self.FireServer(self, unpack(Args))
		--end
	        elseif tostring(self) == "forhackers" and tostring(method) == "InvokeServer" and ConfirmSystem.Throwing == true then
		      Args[2] = KnifeName
		      Args[3] = getNearest()[_G._ZombieKillPart]
		    return self.InvokeServer(self, unpack(Args))
                end
                return oldNamecall(self, ...)
            end)

local Obfuscatedstr = {}
function BlacklistedPart()
workspace.ChildAdded:Connect(function(p)
if p.Name == "map" then
for _,map in pairs(p:GetChildren()) do
	for _,VirtualBlacklisted in pairs(map:GetChildren()) do
		 AddTable(VirtualBlacklisted,Obfuscatedstr)
end
end
end
end)
--function end
end

local Circle = Drawing.new("Circle")
Circle.Color = Color3.fromRGB(22, 13, 56)
Circle.Thickness = 1
Circle.Radius = 1000
Circle.Visible = false
Circle.NumSides = 1000
Circle.Filled = false
Circle.Transparency = 1
Circle.Position = Vector2.new(camera.ViewportSize.X / 2, camera.ViewportSize.Y / 2)

local function isWithinFOVCircle(vector)
    local circleCenter = Vector2.new(camera.ViewportSize.X / 2, camera.ViewportSize.Y / 2)
    local distToCenter = (circleCenter - Vector2.new(vector.X, vector.Y)).Magnitude
    return distToCenter <= Circle.Radius
end

local function V4()
--V4:
    local closestDist = math.huge
    local closestPlr = nil
    local circleCenter = Vector2.new(camera.ViewportSize.X / 2, camera.ViewportSize.Y / 2)
    
    for _, v in next, game.GetService(game, "Workspace").enemies.GetChildren(game.GetService(game, "Workspace").enemies) do
        if game.FindFirstChild(v,"Humanoid") and v.Humanoid.Health > 0 then
            local vector, onScreen = camera.worldToScreenPoint(camera, game.WaitForChild(v, "Head", math.huge).Position)
            if isWithinFOVCircle(vector) then
                local dist = (circleCenter - Vector2.new(vector.X, vector.Y)).Magnitude
                if dist < closestDist and onScreen and not isBehindWall(v) then
                    closestDist = dist
                    closestPlr = v
                end
            end
        end
    end
    
    return closestPlr
end

local function checkClosestEntity(version)
if version == "V4" then
	return V4()
else
	return "INVALID VERSION"
end
end

_G._FOVrender = "V4" or V4()

local namecall;
namecall = hookmetamethod(game, "__namecall", function(Self, ...)
	if not checkcaller() and tostring(getcallingscript()) == "GunController" and string.lower(getnamecallmethod()) == "findpartonraywithwhitelist" then
		local args = {...}
		local Tracking = checkClosestEntity(_G._FOVrender)
		if Tracking and ConfirmSystem.Tracking == true then
			if _G.wb_cheat == true then
				wallbang(args[1].Origin,Tracking.Head,function(magicbullet)
					args[1] = Ray.new(magicbullet,(magicbullet - Tracking.Head.Position).unit * 500)
				end)
			else
			        args[1] = Ray.new(args[1].Origin,Tracking.Head.Position - args[1].Origin,Obfuscatedstr)
			end
		end
		return namecall(Self, unpack(args))
	end
	return namecall(Self, ...)
end)

local nearesthead = targetFolders

function silentaim()
if _G._userGun == true and getNearest() then
game:GetService("ReplicatedStorage")["forhackers"]:InvokeServer("hit",getEquippedWeapon(Player),getNearest()[_G._ZombieKillPart])
else
game.ReplicatedStorage.Gun:FireServer({["Normal"] = Vector3.new(0, 0, 0), ["Direction"] = getNearest()[_G._ZombieKillPart].Position, ["Name"] = getEquippedWeapon(Player), ["Hit"] = getNearest()[_G._ZombieKillPart], ["Origin"] = getNearest()[_G._ZombieKillPart].Position, ["Pos"] = getNearest()[_G._ZombieKillPart].Position})
end
end

function testCframeOrigin()
game.ReplicatedStorage.Gun:FireServer({["Normal"] = CFrame.new(0, 0, 0), ["Direction"] = CFrame.new(getNearest()[_G._ZombieKillPart].Position), ["Name"] = getEquippedWeapon(Player), ["Hit"] = getNearest()[_G._ZombieKillPart], ["Origin"] = CFrame.new(getNearest()[_G._ZombieKillPart].Position), ["Pos"] = CFrame.new(getNearest()[_G._ZombieKillPart].Position)})
end

function testVectorOrigin()
game.ReplicatedStorage.Gun:FireServer({["Normal"] = CFrame.new(0, 0, 0), ["Direction"] = Vector3.new(getNearest()[_G._ZombieKillPart].Position), ["Name"] = getEquippedWeapon(Player), ["Hit"] = getNearest()[_G._ZombieKillPart], ["Origin"] = Vector3.new(getNearest()[_G._ZombieKillPart].Position), ["Pos"] = Vector3.new(getNearest()[_G._ZombieKillPart].Position)})
end

function cameratrack()
if _G._userGun == true and nearesthead then
 game:GetService("Workspace").CurrentCamera.CFrame = CFrame.new(game:GetService("Workspace").CurrentCamera.CFrame.p, getNearest().Head.Position)
-- Player.Character.HumanoidRootPart.CFrame = (getNearest().HumanoidRootPart.CFrame * CFrame.new(0, groundDistance, 9))
-- game:GetService("ReplicatedStorage")["forhackers"]:InvokeServer("hit",getEquippedWeapon(Player),getNearest()[_G._ZombieKillPart])
else
game:GetService("Workspace").CurrentCamera.CFrame = CFrame.new(game:GetService("Workspace").CurrentCamera.CFrame.p, getNearest().Head.Position)
-- Player.Character.HumanoidRootPart.CFrame = (getNearest().HumanoidRootPart.CFrame * CFrame.new(0, groundDistance, 9))
-- game.ReplicatedStorage.Gun:FireServer({["Normal"] = Vector3.new(0, 0, 0), ["Direction"] = getNearest()[_G._ZombieKillPart].Position, ["Name"] = getEquippedWeapon(Player), ["Hit"] = getNearest()[_G._ZombieKillPart], ["Origin"] = getNearest()[_G._ZombieKillPart].Position, ["Pos"] = getNearest()[_G._ZombieKillPart].Position,})
end
return
end

Tabs.Misc:AddParagraph({
        Title = "Client Sided Stuff",
        Content = " "
    })

Tabs.Misc:AddButton({
        Title = "Equip All Guns",
        Description = "",
        Callback = function()
for _,Thing in pairs(game.ReplicatedStorage.Guns:GetChildren()) do
if Thing:IsA("Tool") then
Thing.Parent = game.Players.LocalPlayer.Backpack
end
end            
        end
    })
    
Tabs.Misc:AddButton({
        Title = "Equip All Knife",
        Description = "",
        Callback = function()
for _,Thing in pairs(game.ReplicatedStorage.Knives:GetChildren()) do
if Thing:IsA("Tool") then
Thing.Parent = game.Players.LocalPlayer.Backpack
end
end
        end
    })

Tabs.Misc:AddButton({
        Title = "Fast Fire",
        Description = "(Laggy)",
        Callback = function()
for i, v in pairs(getgc(true)) do
     if type(v) == 'table' and rawget(v, 'BulletPerShot') then
       v.Damage = -9999
       v.BulletPerShot = 20
       v.Firerate = 20
       v.Length = 10000
       v.Spread = {
          Min = 0,
  		Rec = 0,
  		Inc = 0,
	  	Max = 0
       }
      end
end
        end
    })
 
 Tabs.Misc:AddParagraph({
        Title = "Server Sided Stuff",
        Content = "Tutorial: Equip the Knife to equipping other guns\nQuestion:Why it keep disappear every wave?, Answer: Because its ServerSided and Real"
    })
 
function DupeSomethin()
    local gunNames = GetGunsName() 
    for _, Thing in pairs(Player.Backpack:GetChildren()) do
        if Thing:IsA("Tool") and table.find(gunNames, Thing.Name) then
            Thing.Parent = Player.Character
        end
    end
end

local weaponList = {}

function FEEquipingGuns()
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local backpack = player.Backpack
    local equippedGuns = {}

    for _, tool in pairs(character:GetChildren()) do
        if tool:IsA("Tool") then
            table.insert(equippedGuns, tool.Name)
        end
    end
    
    for _, tool in pairs(backpack:GetChildren()) do
        if tool:IsA("Tool") then
            table.insert(equippedGuns, tool.Name)
        end
    end

    for _, gunName in pairs(weaponList) do
        if not table.find(equippedGuns, gunName) then
            game:GetService("ReplicatedStorage").RemoteEventContainer.CommunicationF:InvokeServer("EquipItem", gunName)
            wait(2) -- Give time for equipping before proceeding to the next gun

            table.insert(equippedGuns, gunName)
        end
    end

    -- Stop once all guns in the weaponList are equipped
    if #equippedGuns >= #weaponList then
        return
    end
end


function RealFastFire()
for i, v in pairs(getgc(true)) do
     if type(v) == 'table' and rawget(v, "bullets_per_shot") then
       v["bullets_per_shot"] = 13
       v.Spread = {
          Min = 0,
  		Rec = 0,
  		Inc = 0,
	  	Max = 0
       }
      end
end
end

local Uhhhhhhhh = false
local fastfivedmm = false

--[[ alternative

local Toggle = Tabs.Misc:AddToggle("ServerSidedFastFire", {Title = "Fast Fire", Default = false })

    Toggle:OnChanged(function(duh)
    fastfivedmm = duh
    
   while fastfivedmm and wait(0.1) do
          RealFastFire()
       end
    end)
]]

 local Toggle = Tabs.Misc:AddToggle("ServerSidedEquipper", {Title = "Equip Multiple Guns", Default = false })

    Toggle:OnChanged(function(nastyAh)
    Uhhhhhhhh = nastyAh
    
   while Uhhhhhhhh and wait(2) do
          DupeSomethin()
          FEEquipingGuns()
       end
    end)
    
 local MultiDropdown = Tabs.Misc:AddDropdown("SelectedEquipGuns", {
    Title = "Select A Gun to Equip in ServerSided",
    Description = "4-6 guns Maximum otherwise it will disappear",
    Values = GetGunsName(),
    Multi = true,
    Default = {"Machine Gun"},
})

MultiDropdown:OnChanged(function(selectedValues)
    weaponList = {}

    for gunName, state in pairs(selectedValues) do
        if state then
            table.insert(weaponList, gunName)
        end
    end
end)

Tabs.Misc:AddParagraph({
        Title = "Tool/Stuff Mods",
        Content = " "
    })

Tabs.Misc:AddParagraph({
        Title = "Silent Aim",
        Content = ""
    })
    
 local Dropdown = Tabs.Misc:AddDropdown("TargetPart", {
        Title = "Select Target Part",
        Values = {"Head","Torso","Left Leg","Right Leg","Left Arm","Right Arm","HumanoidRootPart"},
        Multi = false,
        Default = 1,
    })
 
 Dropdown:OnChanged(function(list2)
        _G._ZombieKillPart = list2
        PrimaryPart = list2
    end)
 
 local Toggle = Tabs.Misc:AddToggle("SilentAimZombies", {Title = "Silent Aim Zombies", Default = false })

    Toggle:OnChanged(function(bool1)
    ConfirmSystem.Tracking = bool1
    Circle.Visible = false
        BlacklistedPart()
    end)

local SilentAimBoss = false

local Toggle = Tabs.Misc:AddToggle("SilentAimBosses", {Title = "Silent Aim Bosses", Default = false })

    Toggle:OnChanged(function(bool10)    
    SilentAimBoss = bool10
   local Aim = function()
   local Mouse = Player:GetMouse()
    local distance = math.huge
    local target = nil

    for _, enemy in ipairs(game.Workspace.BossFolder:GetDescendants()) do
        if enemy:IsA("Model") and enemy:FindFirstChild(PrimaryPart) and 
           Player.Character:FindFirstChild(PrimaryPart) and 
           not enemy:FindFirstChild("Guns") and 
           enemy.Parent.Name ~= "deadenemies" then

            local nearest = (enemy[PrimaryPart].Position - Player.Character[PrimaryPart].Position).magnitude
            
            if nearest < distance then
                distance = nearest
                target = enemy
            end
        end
    end

    return target
end

local function getInputPosition()
    if UserInputService.TouchEnabled then
        local touches = UserInputService:GetTouches()
        if #touches > 0 then
            return touches[1].Position 
        end
    else
        return Player:GetMouse().Hit
    end
end

local metatable = getrawmetatable(game)
local hooking = metatable.__index
setreadonly(metatable, false)

metatable.__index = newcclosure(function(value2, index2)
    if SilentAimBoss and value2 == Mouse and tostring(index2) == "Hit" then
        local aimTarget = Aim()
        if aimTarget and aimTarget:FindFirstChild(PrimaryPart) then
            return aimTarget[PrimaryPart].CFrame
        end
    end
    
    return hooking(value2, index2)
end)

setreadonly(metatable, true)
end)
 
Tabs.Misc:AddParagraph({
        Title = "Bullet Mods",
        Content = ""
    })
    
local BulletAuraV1 = false

local Toggle = Tabs.Misc:AddToggle("BulletAuraV1", {Title = "Bullet Aura V1", Default = false })

    Toggle:OnChanged(function(bool3)
        BulletAuraV1 = bool3

        while BulletAuraV1 and wait() do
           spawn(silentaim)
           spawn(testCframeOrigin)
           spawn(testVectorOrigin)
        end
    end)

    
local Toggle = Tabs.Misc:AddToggle("BulletAuraV2", {Title = "Bullet Aura V2", Default = false })

    Toggle:OnChanged(function(bool3)
    ConfirmSystem.Damage = bool3
    end)
 
Tabs.Misc:AddParagraph({
        Title = "Knife",
        Content = ""
    })
    
local KillAura = false
local SizeHandle = 20
   
local Toggle = Tabs.Misc:AddToggle("KillAuraTG", {Title = "Kill Aura", Default = false })

    Toggle:OnChanged(function(bool11)
    KillAura = bool11
 
while KillAura and wait(0.1) do
spawn(function()
local player = game.Players.LocalPlayer
local backpack = player.Backpack or player.Character
local basicKnife = backpack:FindFirstChild(KnifeName)
local handle = basicKnife:FindFirstChild("Handle")
local getBox = handle:FindFirstChild("SelectionBox")

if basicKnife and handle then
    handle.Size = Vector3.new(SizeHandle, 1, SizeHandle)
    handle.CanCollide = false
    handle.Massless = true 
    KillZombies("melee",_G._ZombieKillPart)

if not getBox then
    local selectionBox = Instance.new("SelectionBox", handle)
    selectionBox.Adornee = handle
    selectionBox.Color3 = Color3.new(1, 0, 0)
end

         end
      end)
   end
end)

local Input = Tabs.Misc:AddInput("KnifeName", {
    Title = "Knife Name",
    Default = "Basic Knife",
    Placeholder = "Please Put a Knife Name",
    Numeric = false, -- Only allows numbers
    Finished = false, -- Only calls callback when you press enter
    Callback = function(Value)
        KnifeName = tostring(Value) or "Basic Knife"
    end
})

local Slider = Tabs.Misc:AddSlider("KnifeRange", {
    Title = "Kill Aura Range",
    Description = "",
    Default = 20,
    Min = 0,
    Max = 100,
    Rounding = 1,
    Callback = function(Value)
        SizeHandle = tonumber(Value) or 20
    end
})

-- Settings

Tabs.Settings:AddParagraph({
        Title = "Save Config",
        Content = " "
    })

SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)

SaveManager:SetIgnoreIndexes({})

-- Save Folder
InterfaceManager:SetFolder("UnknownHubXUniversal")
SaveManager:SetFolder("UnknownHubXUniversal/Evade")

InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)

Window:SelectTab(1)

-- Auto Load Configuration
SaveManager:LoadAutoloadConfig()
