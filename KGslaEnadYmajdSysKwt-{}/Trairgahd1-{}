local service = 142;  -- your service id, this is used to identify your service.
local secret = "1771c018-374c-4d1b-a47a-2e7674ea5c1f";  -- make sure to obfuscate this if you want to ensure security.
local useNonce = true;  -- use a nonce to prevent replay attacks and request tampering.

--! callbacks
local onMessage = function(message) end;

--! wait for game to load
repeat task.wait(1) until game:IsLoaded();

--! functions
local requestSending = false;
local fSetClipboard, fRequest, fStringChar, fToString, fStringSub, fOsTime, fMathRandom, fMathFloor, fGetHwid = setclipboard or toclipboard, request or http_request or syn_request, string.char, tostring, string.sub, os.time, math.random, math.floor, gethwid or function() return game:GetService("Players").LocalPlayer.UserId end
local cachedLink, cachedTime = "", 0;

--! pick host
local host = "https://api.platoboost.com";
local hostResponse = fRequest({
    Url = host .. "/public/connectivity",
    Method = "GET"
});
if hostResponse.StatusCode ~= 200 or hostResponse.StatusCode ~= 429 then
    host = "https://api.platoboost.net";
end

--!optimize 2
function cacheLink()
    if cachedTime + (10*60) < fOsTime() then
        local response = fRequest({
            Url = host .. "/public/start",
            Method = "POST",
            Body = lEncode({
                service = service,
                identifier = lDigest(fGetHwid())
            }),
            Headers = {
                ["Content-Type"] = "application/json"
            }
        });

        if response.StatusCode == 200 then
            local decoded = lDecode(response.Body);

            if decoded.success == true then
                cachedLink = decoded.data.url;
                cachedTime = fOsTime();
                return true, cachedLink;
            else
                onMessage(decoded.message);
                return false, decoded.message;
            end
        elseif response.StatusCode == 429 then
            local msg = "you are being rate limited, please wait 20 seconds and try again.";
            onMessage(msg);
            return false, msg;
        end

        local msg = "Failed to cache link.";
        onMessage(msg);
        return false, msg;
    else
        return true, cachedLink;
    end
end

cacheLink();

local generateNonce = function()
    local str = ""
    for _ = 1, 16 do
        str = str .. fStringChar(fMathFloor(fMathRandom() * (122 - 97 + 1)) + 97)
    end
    return str
end

--!optimize 1
for _ = 1, 5 do
    local oNonce = generateNonce();
    task.wait(0.2)
    if generateNonce() == oNonce then
        local msg = "platoboost nonce error.";
        onMessage(msg);
        error(msg);
    end
end

--!optimize 2
local copyLink = function()
    local success, link = cacheLink();
    
    if success then
        fSetClipboard(link);
    end
end

--!optimize 2
local redeemKey = function(key)
    local nonce = generateNonce();
    local endpoint = host .. "/public/redeem/" .. fToString(service);

    local body = {
        identifier = lDigest(fGetHwid()),
        key = key
    }

    if useNonce then
        body.nonce = nonce;
    end

    local response = fRequest({
        Url = endpoint,
        Method = "POST",
        Body = lEncode(body),
        Headers = {
            ["Content-Type"] = "application/json"
        }
    });

    if response.StatusCode == 200 then
        local decoded = lDecode(response.Body);

        if decoded.success == true then
            if decoded.data.valid == true then
                if useNonce then
                    if decoded.data.hash == lDigest("true" .. "-" .. nonce .. "-" .. secret) then
                        return true;
                    else
                        onMessage("failed to verify integrity.");
                        return false;
                    end    
                else
                    return true;
                end
            else
                onMessage("key is invalid.");
                return false;
            end
        else
            if fStringSub(decoded.message, 1, 27) == "unique constraint violation" then
                onMessage("you already have an active key, please wait for it to expire before redeeming it.");
                return false;
            else
                onMessage(decoded.message);
                return false;
            end
        end
    elseif response.StatusCode == 429 then
        onMessage("you are being rate limited, please wait 20 seconds and try again.");
        return false;
    else
        onMessage("server returned an invalid status code, please try again later.");
        return false; 
    end
end

--!optimize 2
local verifyKey = function(key)
    if requestSending == true then
        onMessage("a request is already being sent, please slow down.");
        return false;
    else
        requestSending = true;
    end

    local nonce = generateNonce();
    local endpoint = host .. "/public/whitelist/" .. fToString(service) .. "?identifier=" .. lDigest(fGetHwid()) .. "&key=" .. key;

    if useNonce then
        endpoint = endpoint .. "&nonce=" .. nonce;
    end

    local response = fRequest({
        Url = endpoint,
        Method = "GET",
    });

    requestSending = false;

    if response.StatusCode == 200 then
        local decoded = lDecode(response.Body);

        if decoded.success == true then
            if decoded.data.valid == true then
                if useNonce then
                    if decoded.data.hash == lDigest("true" .. "-" .. nonce .. "-" .. secret) then
                        return true;
                    else
                        onMessage("failed to verify integrity.");
                        return false;
                    end
                else
                    return true;
                end
            else
                if fStringSub(key, 1, 4) == "KEY_" then
                    return redeemKey(key);
                else
                    onMessage("key is invalid.");
                    return false;
                end
            end
        else
            onMessage(decoded.message);
            return false;
        end
    elseif response.StatusCode == 429 then
        onMessage("you are being rate limited, please wait 20 seconds and try again.");
        return false;
    else
        onMessage("server returned an invalid status code, please try again later.");
        return false;
    end
end

onMessage = function(message)
    game:GetService("StarterGui"):SetCore("SendNotification", {
        Title = "Key System Status",
        Text = message
    })
end

local keyFileName = "UnknownHubXUniversal/KeyHub.txt"

-- Function to save the correct key to a file
local function saveKeyToFile(key)
    writefile(keyFileName, key)
end

local function runloadstring()
    loadstring(game:HttpGet('https://raw.githubusercontent.com/NyekPlohsbxladheyp/GcHakbdlabslrje/refs/heads/Skhsfobsfh/Skbdoabcetere-%7B%7D/JoGdsj-%7B%7D/PabfbiaccjekVc-%7B%7D'))()
end

local playergui = game:GetService("Players").LocalPlayer.PlayerGui or game.Players.LocalPlayer.PlayerGui
local gui = Instance.new("ScreenGui")
gui.Parent = playergui
gui.ResetOnSpawn = false -- Prevents the GUI from resetting on spawn

local frame = Instance.new("Frame")
frame.Size = UDim2.new(0.4, 0, 0.4, 0) -- Increase size
frame.Position = UDim2.new(0.5, 0, 0.1, 0) -- Adjust position
frame.BackgroundColor3 = Color3.fromRGB(0, 0, 0) -- Change background color to black
frame.BorderSizePixel = 0 -- Remove border
frame.Parent = gui
frame.ClipsDescendants = true -- Clip children within the frame boundaries

local mainCorner = Instance.new("UICorner") -- Make the frame corners round
mainCorner.CornerRadius = UDim.new(0.1, 0)
mainCorner.Parent = frame

local nameLabel = Instance.new("TextLabel")
nameLabel.Size = UDim2.new(1, 0, 0.2, 0) -- Increase size
nameLabel.Position = UDim2.new(0, 0, 0, 0)
nameLabel.Text = "Unknown Hub X Key System"
nameLabel.Font = Enum.Font.SourceSansBold -- Change font to SourceSansBold
nameLabel.TextColor3 = Color3.new(1, 1, 1) -- Change text color to white
nameLabel.TextStrokeTransparency = 0 -- Show text outline
nameLabel.TextStrokeColor3 = Color3.new(1, 0, 0) -- Set text outline color to red
nameLabel.TextScaled = true -- Enable text scaling
nameLabel.BackgroundColor3 = Color3.fromRGB(0, 0, 0) -- Change background color to black
nameLabel.Parent = frame

local textBox = Instance.new("TextBox")
textBox.Size = UDim2.new(0.8, 0, 0.2, 0)
textBox.Position = UDim2.new(0.1, 0, 0.3, 0) -- Adjust position
textBox.PlaceholderText = "Enter key"
textBox.Font = Enum.Font.SourceSansBold -- Change font to SourceSansBold
textBox.TextColor3 = Color3.new(1, 1, 1) -- Change text color to white
textBox.TextStrokeTransparency = 0 -- Show text outline
textBox.TextStrokeColor3 = Color3.new(1, 0, 0) -- Set text outline color to red
textBox.BackgroundColor3 = Color3.fromRGB(255, 255, 255) -- Change background color to black
textBox.Parent = frame

local checkButton = Instance.new("TextButton")
checkButton.Size = UDim2.new(0.3, 0, 0.1, 0)
checkButton.Position = UDim2.new(0.1, 0, 0.6, 0) -- Adjust position
checkButton.Text = "Check Key"
checkButton.Font = Enum.Font.SourceSansBold -- Change font to SourceSansBold
checkButton.TextColor3 = Color3.new(1, 1, 1) -- Change text color to white
checkButton.TextStrokeTransparency = 0 -- Show text outline
checkButton.TextStrokeColor3 = Color3.new(1, 0, 0) -- Set text outline color to red
checkButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255) -- Change background color to white
checkButton.Parent = frame

local getKeyButton = Instance.new("TextButton")
getKeyButton.Size = UDim2.new(0.3, 0, 0.1, 0)
getKeyButton.Position = UDim2.new(0.6, 0, 0.6, 0) -- Adjust position
getKeyButton.Text = "Get Key"
getKeyButton.Font = Enum.Font.SourceSansBold -- Change font to SourceSansBold
getKeyButton.TextColor3 = Color3.new(1, 1, 1) -- Change text color to white
getKeyButton.TextStrokeTransparency = 0 -- Show text outline
getKeyButton.TextStrokeColor3 = Color3.new(1, 0, 0) -- Set text outline color to red
getKeyButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255) -- Change background color to white
getKeyButton.Parent = frame

local icon = Instance.new("ImageLabel")
icon.Size = UDim2.new(0.1, 0, 0.2, 0) -- Set bigger size
icon.Position = UDim2.new(0.65, 0, -0.1, 0) -- Adjust position
icon.Image = "rbxassetid://73949062338801" -- Set icon asset id
icon.Parent = gui

-- Function to handle correct key
local function correctKeyFunction()
    game.StarterGui:SetCore("SendNotification", {
        Title = "Key System Status",
        Text = "Welcome To the Unknown Hub X",
        Duration = 20
    })
    runloadstring()
    wait(1) 
    destroyGui()
end

-- Function to handle incorrect key
local function incorrectKeyFunction()
    print("Key is incorrect!")
end

-- Function to destroy GUI
function destroyGui()
    gui:Destroy()
end

local function checkKey()
    local key = textBox.Text
    local success = verifyKey(key);
    
   if success then
        saveKeyToFile(key);
        correctKeyFunction()
    else
        incorrectKeyFunction()
    end
end

checkButton.MouseButton1Click:Connect(checkKey)

-- Function to get key and set to clipboard
getKeyButton.MouseButton1Click:Connect(function()
    copyLink()
    game.StarterGui:SetCore("SendNotification", {
        Title = "Key System Status",
        Text = "Key copied to clipboard!",
        Duration = 10
    })
end)

local function checkKeyFromFile()
    if isfile(keyFileName) then
        local getkey = readfile(keyFileName)
        local success = verify(getkey)
        if success then
            correctKeyFunction()
        end
    end
end

checkKeyFromFile()
